#!/usr/bin/env python

import sys
import os.path
import traceback

#pathprefix = os.path.normpath(os.path.dirname(__file__))
#pathprefix = os.path.realpath(pathprefix + "/../lib/hypernode")
#sys.path.append(pathprefix)

# General inclusions
import hypernode.log
import hypernode.nodeconfig
import hypernode.nodeconfig.callback
import hypernode.nodeconfig.common

# Parts
import hypernode.nodeconfig.hostname
import hypernode.nodeconfig.phpini
import hypernode.nodeconfig.pubkeys
import hypernode.nodeconfig.sslcerts
import hypernode.nodeconfig.virtualhostname

##
# Configuration
##
runparts = [hypernode.nodeconfig.hostname, hypernode.nodeconfig.phpini, hypernode.nodeconfig.pubkeys, hypernode.nodeconfig.sslcerts, hypernode.nodeconfig.virtualhostname]
nodeconfigpath = "/etc/hypernode/nodeconfig.json"

##
# Logging
##
logger = hypernode.log.getLogger()
logbuffer = hypernode.log.attachBufferHandler(logger)

if sys.stdout.isatty():
    hypernode.log.attachConsoleHandler(logger)
else:
    hypernode.log.attachSyslogHandler(logger)

###
# Fetch nodeconfig
###
logger.info("Applying nodeconfig to node")

try:
    logger.debug("Fetching nodeconfig from %s" % nodeconfigpath)
    config = hypernode.nodeconfig.common.get_config(nodeconfigpath)
except Exception as e:
    logger.critical("Could not open nodeconfig in %s" % nodeconfigpath)
    logger.critical(e)
    sys.exit(1)

###
# Run the parts
###
for module in runparts:
    try:
        logger.debug("Running part %s", module.__name__)
        module.apply_config(config)
    except Exception as e:
        modulelogger = hypernode.log.getLogger(module.__name__)
        modulelogger.error("Could not execute part %s" % module.__name__)
        modulelogger.error(traceback.format_exc())
        try:
            hypernode.nodeconfig.callback.call_error(config, module, e, logbuffer.formatBuffer())
        except Exception as e:
            logger.error("Could not perform error callback to control")
            logger.error(e)
        sys.exit(1)

try:
    hypernode.nodeconfig.callback.call_success(config)
except Exception as e:
    logger.error("Could not perform success callback to control")
    logger.error(e)
    sys.exit(1)